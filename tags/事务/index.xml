<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>事务 on 懒猫博客</title>
    <link>http://www.ruibg.com/tags/%E4%BA%8B%E5%8A%A1/</link>
    <description>Recent content in 事务 on 懒猫博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2018 - 2018  懒猫raibg.com 版权所有</copyright>
    <lastBuildDate>Tue, 04 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.ruibg.com/tags/%E4%BA%8B%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分布式事务及解决方案</title>
      <link>http://www.ruibg.com/post/distributed-transaction/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.ruibg.com/post/distributed-transaction/</guid>
      <description>前言 &amp;emsp;&amp;emsp;随着现代技术的发展，分布式已经成为程序员必须掌握的一项技能了，特别是最近很火的微服务，更进一步推动了分布式的发展。
&amp;emsp;&amp;emsp;提到分布式一个绕不开的话题就是分布式事务。那么什么是分布式事务:
 分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。
 以上是百度百科对分布式事务的解释。也就是说一次操作涉及许多系统，分布式事务就是要这些系统里的操作要么都成功，要么都失败，以保证最终数据的一致性。
数据库事务 &amp;emsp;&amp;emsp;再说分布式事务之前，我们先来回顾下数据库的事务。数据库事务有四个特性：原子性(Atomicity )、一致性( Consistency )、隔离性或独立性( Isolation)和持久性(Durabilily)，简称就是ACID。下面我们来看一下这四种特性数据库是怎么保证的。
原子性(Atomicity)  &amp;emsp;&amp;emsp;想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行回滚，在MySQL中，恢复机制是通过回滚日志（undo log）实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后在对数据库中的对应行进行写入。
&amp;emsp;&amp;emsp;就像你去超市东西要么交钱拿东西一起都执行，要么要是买不到东西，就退钱。
 隔离性(Isolation)  可参考此图理解，详细就不在表述了。
 持久性(Durability)  &amp;emsp;&amp;emsp;意味着在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。即使出现了任何事故比如断电等，事务一旦提交，则持久化保存在数据库中。
 一致性(Consistency)  &amp;emsp;&amp;emsp;事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。
&amp;emsp;&amp;emsp;一致性是事务要达到的最终状态。一致性可以区分为“外部一致性”和“内部一致性”。所谓的“内部一致性”就是指单机事务的一致性。“外部一致性”是针对分布式系统来说的，由于分布式系统写入和读取可能不在同一台机器上，而这必然会有一段时间导致不同机器上所存的数据不一致的情况，这就是所谓的“不一致时间窗口”。
 分布式事务 分布式事务产生的原因 1）数据库数据量大，对数据库进行分库分表。
2）业务拆分。比如电商业务会有商品、订单、支付、促销等服务域，每个域都有各自独立的数据库。
分布式事务的基础 &amp;emsp;&amp;emsp;在分布式事务中，ACID是很难达到的，即使达到了性能也会受到很大的影响，这种时候需要一个新的理论来支持分布式事务，也就是CAP理论和BASE理论。
CAP理论 CAP理论又被叫作布鲁尔定理。对于设计分布式系统来说CAP就是入门理论。
 C (一致性，Consistency):对某个指定的客户端来说，读操作能返回最新的写操作。对于数据分布在不同节点上的数据上来说，如果在某个节点更新了数据，那么在其他节点如果都能读取到这个最新的数据，那么就称为强一致，如果有某个节点没有读取到，那就是分布式不一致。 A(可用性，Availability)：非故障的节点在合理的时间内返回合理的响应(不是错误和超时的响应)。可用性的两个关键一个是合理的时间，一个是合理的响应。合理的时间指的是请求不能无限被阻塞，应该在合理的时间给出返回。合理的响应指的是系统应该明确返回结果并且结果是正确的。 P(分区容错性，Partition tolerance):当出现网络分区后，系统能够继续工作。打个比方，这里个集群有多台机器，有台机器网络出现了问题，但是这个集群仍然可以正常工作。
  &amp;emsp;&amp;emsp;在分布式系统中，网络无法100%可靠，分区其实是一个必然现象，如果我们选择了一致性、可用性而放弃了分区容错性，那么当发生分区现象时，为了保证一致性，这个时候必须拒绝请求，但是可用性又不允许，所以分布式系统理论上不可能选择一致性、可用性架构，只能选择一致性、分区容错性或者可用性、分区容错性架构。
&amp;emsp;&amp;emsp;对于CP来说，放弃可用性，追求一致性和分区容错性，zookeeper其实就是追求的强一致。
&amp;emsp;&amp;emsp;对于AP来说，放弃一致性(这里说的一致性是强一致性)，追求分区容错性和可用性，这是很多分布式系统设计时的选择，后面的BASE也是根据AP来扩展。
&amp;emsp;&amp;emsp;CAP理论中是忽略网络延迟，但是在现实中总会有一定的时间是不一致。同时CAP中选择两个，比如你选择了CP，并不是叫你放弃A。因为P出现的概率实在是太小了，大部分的时间你仍然需要保证CA。就算分区出现了你也要为后来的A做准备，比如通过一些日志的手段，使其他机器回复至可用，这叫做补偿事务。
BASE理论 在分布式系统中，我们往往追求的是可用性，它的重要程序比一致性要高，那么如何实现高可用性呢？ 前人已经给我们提出来了另外一个理论，就是BASE理论，它是用来对CAP定理进行进一步扩充的。BASE理论指的是：
 Basically Available（基本可用）:分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。 Soft state（软状态）：允许系统中存在中间状态，这个状态不影响系统可用性，这里指的是CAP中的不一致。 Eventually consistent（最终一致性）：最终一致:最终一致是指经过一段时间后，所有节点数据都将会达到一致。  &amp;emsp;&amp;emsp;BASE解决了CAP中理论没有网络延迟，在BASE中用软状态和最终一致，保证了延迟后的一致性。BASE和 ACID 是相反的，它完全不同于ACID的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。
分布式事务解决方案 &amp;emsp;&amp;emsp;再说解决方案之前，我们先思考下是否一定需要分布式事务。在我们进行系统架构设计之前，要考虑到开发成本，防止过度设计，有时候可以把需要事务的微服务聚合成一个单机服务，使用数据库的单机事务。因为分布式事务的开发成本还是很高的，千万不要为了追求设计，尔引入不必要的成本和复杂度。
基于XA协议的两阶段提交（2PC） &amp;emsp;&amp;emsp;分为两个阶段：第一阶段是表决阶段，所有参与者都将本事务能否成功的信息反馈发给协调者；第二阶段是执行阶段，协调者根据所有参与者的反馈，通知所有参与者，步调一致地在所有分支上提交或者回滚。</description>
    </item>
    
  </channel>
</rss>